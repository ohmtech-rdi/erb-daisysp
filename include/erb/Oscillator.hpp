/*****************************************************************************

      Oscillator.hpp
      Copyright (c) 2023 Raphael DINGE

*Tab=3***********************************************************************/



#pragma once



/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



namespace erb
{



/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*
==============================================================================
Name: ctor
==============================================================================
*/

Oscillator::Oscillator (size_t sample_rate)
{
   _impl.Init (float (sample_rate));
}



/*
==============================================================================
Name: reset
==============================================================================
*/

void  Oscillator::reset (float phase)
{
   // The phase meaning is not consistent in `PhaseAdd` and `Reset`.
   // Let's put them both normalized.

   _impl.Reset (phase * TWOPI_F);
}



/*
==============================================================================
Name: end_of_rise
==============================================================================
*/

bool  Oscillator::end_of_rise () const
{
   return const_cast <daisysp::Oscillator &> (_impl).IsEOR ();
}



/*
==============================================================================
Name: end_of_cycle
==============================================================================
*/

bool  Oscillator::end_of_cycle () const
{
   return const_cast <daisysp::Oscillator &> (_impl).IsEOC ();
}



/*
==============================================================================
Name: rising
==============================================================================
*/

bool  Oscillator::rising () const
{
   return const_cast <daisysp::Oscillator &> (_impl).IsRising ();
}



/*
==============================================================================
Name: falling
==============================================================================
*/

bool  Oscillator::falling () const
{
   return const_cast <daisysp::Oscillator &> (_impl).IsFalling ();
}



/*
==============================================================================
Name: sample
==============================================================================
*/

float Oscillator::sample ()
{
   return _impl.Process ();
}



/*
==============================================================================
Name: operator ()
==============================================================================
*/

template <size_t size>
std::array <float, size>   Oscillator::operator () ()
{
   std::array <float, size> ret;
   for (size_t i = 0 ; i < size ; ++i)
   {
      ret [i] = _impl.Process ();
   }

   return ret;
}



/*\\\ INTERNAL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*
==============================================================================
Name: impl_set_frequency
==============================================================================
*/

void  Oscillator::impl_set_frequency (float freq)
{
   _impl.SetFreq (freq);
}



/*
==============================================================================
Name: impl_set_frequency
==============================================================================
*/

void  Oscillator::impl_set_frequency (Frequency freq)
{
   _impl.SetFreq (freq.value);
}



/*
==============================================================================
Name: impl_set_amplitude
==============================================================================
*/

void  Oscillator::impl_set_amplitude (float amp)
{
   _impl.SetAmp (amp);
}



/*
==============================================================================
Name: impl_set_amplitude
==============================================================================
*/

void  Oscillator::impl_set_amplitude (Decibel amp)
{
   _impl.SetAmp (amp.to_voltage_gain ());
}



/*
==============================================================================
Name: impl_set_waveform
==============================================================================
*/

void  Oscillator::impl_set_waveform (Waveform waveform)
{
   _impl.SetWaveform (static_cast <uint8_t> (waveform));
}



/*
==============================================================================
Name: impl_set_pulse_width
==============================================================================
*/

void  Oscillator::impl_set_pulse_width (float pw)
{
   _impl.SetPw (pw);
}



/*
==============================================================================
Name: impl_add_phase
==============================================================================
*/

void  Oscillator::impl_add_phase (float phase_delta)
{
   _impl.PhaseAdd (phase_delta);
}



/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



}  // namespace erb



/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
