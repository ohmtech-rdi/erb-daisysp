/*****************************************************************************

      Adsr.hpp
      Copyright (c) 2023 Raphael DINGE

*Tab=3***********************************************************************/



#pragma once



/*\\\ INCLUDE FILES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



namespace erb
{



/*\\\ PUBLIC \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*
==============================================================================
Name: ctor
==============================================================================
*/

Adsr::Adsr (size_t sample_rate)
{
   _impl.Init (float (sample_rate));
}



/*
==============================================================================
Name: retrigger
==============================================================================
*/

void  Adsr::retrigger (bool hard)
{
   _impl.Retrigger (hard);
}



/*
==============================================================================
Name: running
==============================================================================
*/

bool  Adsr::running () const
{
   return _impl.IsRunning ();
}



/*
==============================================================================
Name: stage
==============================================================================
*/

Adsr::Stage Adsr::stage () const
{
   return static_cast <Stage> (
      const_cast <daisysp::Adsr &> (_impl).GetCurrentSegment ()
   );
}



/*
==============================================================================
Name: stage_attack
==============================================================================
*/

bool  Adsr::stage_attack () const
{
   return stage () == Stage::Attack;
}



/*
==============================================================================
Name: stage_decay
==============================================================================
*/

bool  Adsr::stage_decay () const
{
   return stage () == Stage::Decay;
}



/*
==============================================================================
Name: stage_release
==============================================================================
*/

bool  Adsr::stage_release () const
{
   return stage () == Stage::Release;
}



/*
==============================================================================
Name: sample
==============================================================================
*/

float Adsr::sample (bool gate)
{
   return _impl.Process (gate);
}



/*
==============================================================================
Name: operator ()
==============================================================================
*/

template <size_t size>
std::array <float, size>   Adsr::operator () (bool gate)
{
   static_assert (size > 0);

   std::array <float, size> ret;
   ret [0] = _impl.Process (gate);
   for (size_t i = 1 ; i < size ; ++i)
   {
      ret [i] = _impl.Process (false);
   }

   return ret;
}



/*\\\ INTERNAL \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

/*
==============================================================================
Name: impl_set_attack_time
==============================================================================
*/

void  Adsr::impl_set_attack_time (float time_s)
{
   _impl.SetAttackTime (time_s);
}



/*
==============================================================================
Name: impl_set_attack_time
==============================================================================
*/

void  Adsr::impl_set_attack_time (std::chrono::seconds time_s)
{
   _impl.SetAttackTime (time_s.count ());
}



/*
==============================================================================
Name: impl_set_decay_time
==============================================================================
*/

void  Adsr::impl_set_decay_time (float time_s)
{
   _impl.SetDecayTime (time_s);
}



/*
==============================================================================
Name: impl_set_decay_time
==============================================================================
*/

void  Adsr::impl_set_decay_time (std::chrono::seconds time_s)
{
   _impl.SetDecayTime (time_s.count ());
}



/*
==============================================================================
Name: impl_set_release_time
==============================================================================
*/

void  Adsr::impl_set_release_time (float time_s)
{
   _impl.SetReleaseTime (time_s);
}



/*
==============================================================================
Name: impl_set_release_time
==============================================================================
*/

void  Adsr::impl_set_release_time (std::chrono::seconds time_s)
{
   _impl.SetReleaseTime (time_s.count ());
}



/*
==============================================================================
Name: impl_set_sustain_level
==============================================================================
*/

void  Adsr::impl_set_sustain_level (float level)
{
   _impl.SetSustainLevel (level);
}



/*
==============================================================================
Name: impl_set_sustain_level
==============================================================================
*/

void  Adsr::impl_set_sustain_level (Decibel level)
{
   _impl.SetSustainLevel (level.to_voltage_gain ());
}



/*\\\ PRIVATE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/



}  // namespace erb



/*\\\ EOF \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
